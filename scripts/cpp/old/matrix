
double pot(double x, double y, double z) {
    return -V0 / (1 + exp((sqrt(x*x + y*y + z*z) - R) / diff));
}

double spinOrbitCoeff(double x, double y, double z) {
    double fac = 1;
    double r = sqrt(x*x + y*y + z*z);
    if(r > 1e-12) {
        double t = (r-R)/diff;
        fac = -pow(diff*r, -1)*exp(t)/pow(1+exp(t), 2);
    }
    return 0.44*V0*pow((r_0/h_bar), 2)*fac;
}
std::complex<double> A(int i, int j, int k, int s, int i1, int j1, int k1, int s1, const Grid& grid) {
    Matrix<complex<double>, 2, 2> spin(2, 2);
    spin.setZero();
    auto pauli = nuclearConstants::getPauli();

    double v = 0;
    double h = grid.get_h();
    double x = grid.get_xs()[i], y = grid.get_ys()[j], z = grid.get_zs()[k];
    double ls = spinOrbitCoeff(x, y, z);
    if (i1 == i && j1 == j && k1 == k && s1 == s)
        v = (pot(grid.get_xs()[i], grid.get_ys()[j], grid.get_zs()[k])*C*h*h - 6) / (C * h * h);
    else if ((i == i1 && k == k1 && s==s1 && (j == j1 + 1 || j == j1 - 1)) ||
             (j == j1 && k == k1 && s==s1 && (i == i1 + 1 || i == i1 - 1)) ||
             (i == i1 && j == j1 && s==s1 && (k == k1 + 1 || k == k1 - 1)))
        v = 1 / (C * h * h);
    if((i + 1 == i1 || i - 1 == i1)&& j == j1 && k == k1)
        spin += (i1-i)*(pauli[1]*z - pauli[2]*y);

    else if(i == i1 && (j + 1 == j1 || j - 1 == j1) && k == k1)
        spin += (j1-j)*(-pauli[0]*z + pauli[2]*x);

    else if(i == i1 && j == j1 && (k + 1 == k1 || k - 1 == k1))
        spin += (k1-k)*(pauli[0]*y - pauli[1]*x);
    //ls = 0;
    spin = -pow(2*h, -1)*std::complex<double>(0, 1.0)*0.5*h_bar*h_bar*spin * ls;

    return spin(s, s1) + v;    
}
SparseMatrix<std::complex<double>> matsetup_oscillator(const Grid& grid) {
    int n = grid.get_n();
    SparseMatrix<std::complex<double>> mat(n * n * n * 2, n * n * n * 2);
    vector<Triplet<std::complex<double>>> tripletList;

    #pragma omp parallel for collapse(4)
    for(int s = 0; s < 2; ++s) {
        for(int s1 = 0; s1 < 2; ++s1) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                for (int i1 = max(0, i-1); i1 <= min(n-1, i+1); ++i1) {
                    for (int j1 = max(0, j-1); j1 <= min(n-1, j+1); ++j1) {
                        for (int k1 = max(0, k-1); k1 <= min(n-1, k+1); ++k1) {
                            int n0 = grid.idx(i, j, k, s);
                            int n1 = grid.idx(i1, j1, k1, s1);
                            std::complex<double> val = A(i, j, k, s, i1, j1, k1, s1, grid);
                            if (val != std::complex<double>(0, 0)) {
                                #pragma omp critical
                                tripletList.emplace_back(n0, n1, val);
                            }
                        }
                    }
                }
            }
        }
    }
        }
    }
    mat.setFromTriplets(tripletList.begin(), tripletList.end());
    return mat;
}